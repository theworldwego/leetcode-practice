640. 求解方程(https://leetcode-cn.com/problems/solve-the-equation/)

题目：
求解一个给定的方程，将x以字符串"x=#value"的形式返回。该方程仅包含'+'，' - '操作，变量 x 和其对应系数。

如果方程没有解，请返回“No solution”。

如果方程有无限解，则返回“Infinite solutions”。

如果方程中只有一个解，要保证返回值 x 是一个整数。

示例 1：

输入: "x+5-3+x=6+x-2"
输出: "x=2"
示例 2:

输入: "x=x"
输出: "Infinite solutions"
示例 3:

输入: "2x=x"
输出: "x=0"
示例 4:

输入: "2x+3x-6x=x+2"
输出: "x=-1"
示例 5:

输入: "x=x+2"
输出: "No solution"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/solve-the-equation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


题解：
class Solution {


public:
    bool valid_op_rand(char c)
    {
        return (c == 'x') || (isdigit(c));
    }

    bool valid_op(char c)
    {
        return (c == '+') || (c == '-');
    }
    bool str_process(string str, int *a, int *b) {
        int length = str.length();
        int op_rand_start = 0;
        int op_rand_end = 0;
        int sign = 1;
        int num = 0;
        bool num_prefix = false;

        for(int i=0;i<length;i++)
        {
            if(str[i] == 'x')
            {
                if(num_prefix == true)
                {
                    *a += num*sign;
                    num=0;
                    num_prefix = false;
                }
                else
                {
                    *a += sign;
                }
                if(i == length-1)
                {
                    break;
                }

                if(!valid_op(str[i+1]))
                {
                    cout << "illegal input - no op after x" << endl;
                    return false;
                }
            }else if(isdigit(str[i]))
            {
                num = (str[i] - '0');
                if(i == length-1)
                {
                    *b += num *sign;
                    num = 0;
                }

                while(i<length-1)
                {
                    if(isdigit(str[i+1]))
                    {
                        num = num*10 + (str[i+1]- '0');
                        if(i+1 == length-1)
                        {
                            *b += num *sign;
                            num = 0;
                        }
                    }else
                    {
                        if (str[i+1] == 'x')
                        {
                            num_prefix = true;
                        }
                        break;
                    }

                    i++;
                }
            }else if(str[i] == '+')
            {
                if(i == length-1)
                {
                    cout << "illegal input - no right oprand for +" << endl;
                    return false;
                }

                if(num)
                {
                    *b += num*sign;
                    num = 0;
                }

                sign = 1;
            }else if(str[i] == '-')
            {
                if(i == length-1)
                {
                    cout << "illegal input - no right oprand for -" << endl;
                    return false;
                }

                if(num)
                {
                    *b += num*sign;
                    num = 0;
                }

                sign = -1;
            }
            else
            {
                cout << "illegal input - invalid char" << endl;
                return false;
            }

        }

        return true;
    }

     string solveEquation(string equation) {
        int length = equation.length();
        size_t pos;
        string output = "";
        char buf[80] = "";
        string left_string, right_string;
        int a1=0,a2=0,b1=0,b2=0;

        //input check
        if(length < 3)
        {
            cout << "illegal input - incomplete" << endl;
            return output;
        }

        //split string
        pos = equation.find("=");
        if(pos == equation.npos)
        {
            cout << "illegal input - no =" << endl;
            return output;
        }

        if((pos == 0) || (pos == length-1))
        {
            cout << "illegal input - no left or right" << endl;
            return output;
        }

        left_string = equation.substr(0, pos);
        //process left string
        if(str_process(left_string, &a1,&b1) == false)
        {
            cout << "illegal input - left string not valid" << endl;
            return output;
        }



        right_string = equation.substr(pos+1,length-1);
        //process right string
        if(str_process(right_string, &a2,&b2) == false)
        {
            cout << "illegal input - right string not valid" << endl;
            return output;
        }

        if(a1 == a2)
        {
            if(b1 == b2)
            {
                sprintf(buf, "Infinite solutions");
                output = buf;
                return output;
            }
            else
            {
                sprintf(buf, "No solution");
                output = buf;
                return output;
            }
        }
        else
        {
            sprintf(buf, "x=%d", (b2-b1)/(a1-a2));
            output = buf;
            return output;
        }


    }
};

评价：
1. 看题有点不仔细。题解中加入了对非法字符的处理
2. 看了几个其他的题解，发现对于错误的处理不好。例如“1+x+” “=100” “x+x=” “xxx=123”.工程实践和考试题目差别还是挺大的。
3. 题目的答案值得商榷。应该很难回避答案是浮点数的情况。而期望的答案都是整数。
4. 题目最好加入输入数字长度的限制，否则要处理大数的情况。在解题过程中曾经想过写一个处理无穷长度数字加减法的通用函数。
